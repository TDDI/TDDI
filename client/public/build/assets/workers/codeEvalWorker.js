onmessage=function(e){function merge(e,s){var r=Array.isArray(s),a=r&&[]||{};return r?(e=e||[],a=a.concat(e),s.forEach(function(s,r){"undefined"==typeof a[r]?a[r]=s:"object"==typeof s?a[r]=merge(e[r],s):-1===e.indexOf(s)&&a.push(s)})):(e&&"object"==typeof e&&Object.keys(e).forEach(function(s){a[s]=e[s]}),Object.keys(s).forEach(function(r){a[r]="object"==typeof s[r]&&s[r]&&e[r]?merge(e[r],s[r]):s[r]})),a}var injectThen=function(scope,cb){for(var key in scope)eval(key+"=scope[key];");return cb()},safeToString=function(e){return void 0===e?"undefined":e.toString()},test=function(){return function(){var failureCases=void 0,successCases=void 0,error=void 0,result=void 0,scope=void 0,key=void 0;try{eval(code)}catch(e){return e.toString()}}()},code=e.data[0],preOp=e.data[1],options=e.data[2],scripts=options.scripts,result=void 0,error=void 0,expect;for(var i in scripts)importScripts(scripts[i]);chai&&(expect=chai.expect),eval(preOp),failureCases=failureCases||[],successCases=successCases||[];for(var i in successCases){var successCase=successCases[i],response=injectThen(successCase.scope,test);if(response){error=[response,successCase.failMessage];for(var key in successCase.scope)error.push(key+" = "+safeToString(successCase.scope[key]));break}}if(!error)for(var i in failureCases){var failureCase=failureCases[i],successCase=merge({},successCases[0]),finalFailureCase=merge(successCase,failureCase),response=injectThen(finalFailureCase.scope,test);if(console.log(response),!response){error=[response,finalFailureCase.failMessage];for(var key in finalFailureCase.scope)error.push(key+" = "+safeToString(finalFailureCase.scope[key]));break}}console.log(error),postMessage({result:result,error:error})};